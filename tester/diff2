Files in directory
type ls export shell else
type djiejde 
type type
type echo
echo $(ls)
echo $(echo Hello)
echo $(echo First command; echo Second command)
echo $(ls && echo Listing succeeded || echo Listing failed)
echo Files in directory | cat - $(ls)
echo $(echo start; ls | grep .c; echo done)
echo $(mkdir test_dir && echo Directory created || echo Directory creation failed)
echo $(rm non_existent_file || echo File not found)
echo $(echo $(echo nested; ls) | echo Finished)
echo $(echo $(echo salut; echo prout) | echo salut)
$(cd /nonexistent | echo Changed dir || echo Failed to change dir; echo Command complete)
echo $(echo salut; echo salut) | ls
echo $(ls /etc | head -n 5)
echo $(uname -a && echo Kernel info)
echo $(echo $(ls | wc -l) | cat - $(echo Done))
echo $(ls /etc && ls /nonexistentdir || echo Dir not found)
echo $(echo Pipe test && ls /usr | grep bin | wc -l)
echo $(cat /dev/null && echo Empty file || echo Fallback)
echo $(mkdir newdir && ls && rmdir newdir && echo Dir test complete)
echo $(find /usr -maxdepth 1 -type d | xargs ls | grep bin && echo Dir listing done)
echo $(seq 1 10 | xargs -I {} echo {} | wc -l && echo Xargs done)
echo $(ls /etc | grep conf | wc -l)
echo $(find /etc | grep conf | head -n 3)
echo $(echo Test done; echo $(ls /usr | head -n 5))
echo $(false && echo Fail || echo Success)
echo $(ls /bin | grep bash && echo Found bash || echo Not found)
echo $(echo Begin test; ls /etc | grep conf | wc -l)
echo $(ls | grep txt && echo Text files found || echo No text files)
echo $(echo Start; echo $(echo $(ls /etc | grep conf) | wc -l) && echo Finish)
echo $(mkdir tempdir && echo Dir created; rmdir tempdir && echo Dir removed)
echo prefix$(echo salut)suffix
echo count:$(ls | wc -l)files
echo first file:$(ls | head -n 1)
echo kernel:$(uname -r)version
echo path:$(echo /usr/bin | grep bin)found
echo current user:$(whoami)
echo check:$(echo $(ls /etc | grep conf)config files)
echo listing:$(echo $(ls /usr/home | grep sh))done
echo last command:$(echo $(ls /etc | wc -l))files found
echo $(echo $(echo $(uname)))suffix
echo status:$(ls /etc | grep $(whoami) | wc -l)processes running
echo result:$(mkdir testdir && echo created || echo failed)directory
echo result:$(echo $(ls /usr | grep lib))libraries found
echo FirstPrefix$(echo salut)FirstSuffix$(echo salut)EndSuffix
echo $(echo FirstPrefix$(echo $(echo hey))FirstSuffix$(echo salut)EndSuffix)
echo $(echo $(mkdir tempdir && echo Dir created && (rmdir tempdir && echo Dir removed)))
echo prefix$(echo $(echo inside subshell))suffix
echo files:$(ls | (wc -l))listed
echo first file:$(ls | (head -n 1))found
echo $(echo $(echo $(ls | wc -l)) files in current directory)
echo username:$(whoami | (echo $(grep -o .)))
echo current dir:$(pwd | (echo $(ls $(pwd) | grep $(basename $(pwd)))))
echo file check:$(echo $(ls /etc | (grep conf && echo configuration files)))done
echo full check:$(echo $(echo prefix$(uname)postfix))suffix
echo $(mkdir dirtest && echo Directory made && (rmdir dirtest && echo Directory removed))complete
echo result:$(echo $(ls /usr | (grep bin && echo binaries found)))
echo nesting:$(echo $(echo $(echo inner level reached)))done
echo dir test:$(echo $(mkdir newdir && echo dir created && (rmdir newdir && echo dir removed)))complete
echo process count:$(ps aux | (grep $(whoami) && echo $(ps aux | wc -l)))processes running
echo $(ls | (echo first:$(head -n 1) && echo last:$(tail -n 1)))file list complete
echo result:$(echo $(echo kernel:$(uname -r)))system details
echo test case:$(echo $(echo $(mkdir $(echo tempdir) && echo dir created && (rmdir tempdir && echo dir removed))))nested
echo directories:$(echo $(echo $(ls / | (grep home && echo home found))))
echo deep nesting:$(echo $(echo $(echo $(echo $(uname)))))suffix
echo match count:$(echo $(ls /usr | (grep bin && echo found))items located)
echo path validation:$(echo $(echo $(echo $(echo /usr/bin | (grep usr))))valid)
echo $(echo $(echo $(mkdir testdir && echo created && (rmdir testdir && echo removed))))status
echo a > ./outfiles/test1.txt; echo b >> ./outfiles/test1.txt
cat < ./infiles/file1 > ./outfiles/test2.txt
ls non_existing_file &> ./outfiles/test3.txt
ls non_existing_file &>> ./outfiles/test4.txt; echo Command completed &>> ./outfiles/test4.txt
echo a > ./outfiles/test5.txt; ls non_existing_file &>> ./outfiles/test5.txt
cat < ./infiles/empty | echo b > ./outfiles/test7.txt
ls non_existing_file &> ./outfiles/test9.txt | echo Error handled &>> ./outfiles/test9.txt
echo a > ./outfiles/test10.txt; echo b < ./infiles/file1 >> ./outfiles/test10.txt
cat < ./infiles/no_perms > ./outfiles/test11.txt; echo Perm issue &>> ./outfiles/test11.txt
cat < ./infiles/file1 | echo b > ./outfiles/test14.txt
echo a > ./outfiles/test15.txt; cat < ./infiles/empty >> ./outfiles/test15.txt
ls non_existing_file &>> ./outfiles/test16.txt; echo b &>> ./outfiles/test16.txt
echo a > ./outfiles/test17.txt | ls non_existing_file &>> ./outfiles/test17.txt
echo a > ./outfiles/test18.txt; echo b >> ./outfiles/test18.txt | ls non_existing_file &>> ./outfiles/test18.txt
echo a &>> ./outfiles/test20.txt; echo b &>> ./outfiles/test20.txt
ls non_existing_file &>> ./outfiles/test21.txt; echo Handled &>> ./outfiles/test21.txt
echo a > ./outfiles/test22.txt | ls non_existing_file &>> ./outfiles/test22.txt
ls non_existing_file &> ./outfiles/test24.txt | echo error check &>> ./outfiles/test24.txt
echo a > ./outfiles/test28.txt | ls non_existing_file &>> ./outfiles/test28.txt
echo a > ./outfiles/test30.txt; echo b > ./outfiles/test30.txt 2>&1
echo a &> ./outfiles/test34.txt; echo b <&1 &>> ./outfiles/test34.txt
cat < ./infiles/file1 >&2 > ./outfiles/test35.txt
echo a < ./infiles/file1 >&1 > ./outfiles/test38.txt
cat < ./infiles/empty >&1 > ./outfiles/test39.txt
echo errors
cat < ./infiles/file1 300>&1 > ./outfiles/test58.txt | echo c >&5 >> ./outfiles/test58.txt
ls non_existing_file 1024>&2 > ./outfiles/test59.txt | echo File not found 512>&1 >> ./outfiles/test59.txt
echo a > ./outfiles/test60.txt -10>&2 | ls non_existing_file -20>&1 >> ./outfiles/test60.txt
cat < ./infiles/file1 10000>&1 > ./outfiles/test61.txt | echo error 5000>&2 >> ./outfiles/test61.txt
ls non_existing_file 3>&1 > ./outfiles/test62.txt 4>&2 | echo handled >&99 >> ./outfiles/test62.txt
echo a > ./outfiles/test63.txt 77>&1 | ls non_existing_file 88>&2 >> ./outfiles/test63.txt
echo a > ./outfiles/test65.txt 3333>&1 | ls non_existing_file 4444>&2 >> ./outfiles/test65.txt
;;
;<>><;
;
&
||
|||||||||||||||
>>>>>>>>>>>>>>
<<<><><><>
<<<1>@>>>
{
;}
{ echo salut mec
echo salut mec ;}
()
echo $()
$(false)
#!/bin/bash
EXEC_PATH="../42sh"
# PROMPT="echo -"

if [[ "${1}" == "-d" ]]; then
	debug=1;
	shift 1;
fi

if [[ $1 ]]; then
	test_lists=(
		$1
	)
else
	test_lists=(
		"test"
		"syntax"
		"expand"
		"subshell"
		"command_sub"
		"command_group"
		"arithmetic_expansion"
		"builtin_export"
	)
fi

REMOVE_COLORS="sed s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g"
REMOVE_EXIT="grep -v ^exit$"

BOLD="\e[1m"
YELLOW="\033[0;33m"
GREY="\033[38;5;244m"
PURPLE="\033[0;35m"
GREEN="\033[92m"
BLUE="\033[0;36m"
RED="\e[0;31m"
RESET="\033[0m"
CINNABAR="\033[0;38;2;244;68;46m"
SANDY_BROWN="\033[0;38;2;252;158;79m"

mkdir -p ./outfiles
mkdir -p ./42sh_outfiles
mkdir -p ./42sh_error
mkdir -p ./bash_outfiles
mkdir -p ./bash_error

chmod 000 infiles/no_perms

i=0
ok=0
buffer_error="";
max_line_len=60;

for file in "${test_lists[@]}"
do
	equals_len=$(( (max_line_len / 2) - (${#file} / 2) ))
	printf "${SANDY_BROWN}" && printf "%${equals_len}s" " " | tr ' ' '=';
	printf "${CINNABAR}${file^^}";
	printf "${SANDY_BROWN}" && printf "%${equals_len}s" " " | tr ' ' '='; printf "\n"
	line_len=0;
	while IFS= read -r line
	do
		
		((i++))

		rm -rf ./outfiles/*
		rm -rf ./42sh_outfiles/*

		EXEC_OUTPUT=$(echo -e "$line" | $EXEC_PATH 2>./42sh_error/e)
		EXEC_EXITNO=${?}
		EXEC_OUTPUT=${EXEC_OUTPUT:-"None"}
		EXEC_ERROR=$(sed 's/.*://' ./42sh_error/e || echo "null")
		EXEC_COPY=$(cp ./outfiles/* ./42sh_outfiles &>/dev/null || echo "There is no file to copy")

		rm -rf ./outfiles/*
		rm -rf ./bash_outfiles/*

		BASH_OUTPUT=$(echo -e "$line" | bash 2>./bash_error/e)
		BASH_OUTPUT=${BASH_OUTPUT:-"None"}
		BASH_COPY=$(cp ./outfiles/* ./bash_outfiles &>/dev/null || echo "There is no file to copy")
		EXEC_ERROR=$(sed 's/.*://' ./bash_error/e || echo "null")
		BASH_EXITNO=$(echo ${?})

		FILE_DIFF=$(diff -q ./42sh_outfiles ./bash_outfiles)

		
		if [[ "$EXEC_OUTPUT" == "$BASH_OUTPUT" && $FILE_DIFF == "" && "$EXEC_EXITNO" == "$BASH_EXITNO" && "$EXEC_COPY" == "$BASH_COPY" ]]; then
			if [[ "$EXEC_ERROR" != "$BASH_ERROR" ]]; then
				printf "⚠️ "
			else
				printf "✅${RESET}"
			fi
			((ok++)); ((line_len++));
			if ((line_len >= max_line_len / 2)); then printf "\n"; line_len=0; fi
			continue
		else
			printf "❌"
		fi
		((line_len++));
		if ((line_len >= max_line_len / 2)); then printf "\n"; line_len=0; fi

		buffer_error+=$(printf "\n${BLUE}${BOLD}Test %4s: ${YELLOW}${line}\n${RESET}" $i);
		if [[ "$EXEC_OUTPUT" != "$BASH_OUTPUT" ]]; then
			buffer_error+=$(printf "42sh output: %.100s\n${RESET}" "$EXEC_OUTPUT");
			buffer_error+=$(printf "bash output: %.100s\n${RESET}" "$BASH_OUTPUT");
		fi
		if [[ "$EXEC_ERROR" != "$BASH_ERROR" && debug -eq 1 ]]; then
			buffer_error+=$(printf "42sh error: %s\n${RESET}" "$EXEC_ERROR");
			buffer_error+=$(printf "bash error: %s\n${RESET}" "$BASH_ERROR");
		fi
		if [[ "$EXEC_EXITNO" != "$BASH_EXITNO" ]]; then
			buffer_error+=$(printf "42sh exitno: %s\n${RESET}" "$EXEC_EXITNO");
			buffer_error+=$(printf "bash exitno: %s\n${RESET}" "$BASH_EXITNO");
		fi
		if [[ "$EXEC_COPY" != "$BASH_COPY" ]]; then
			buffer_error+=$(printf "42sh file copy: %s\n${RESET}" "$EXEC_COPY");
			buffer_error+=$(printf "bash file copy: %s\n${RESET}" "$BASH_COPY");
		fi
		if [[ "$FILE_DIFF" ]];then
			echo $FILE_DIFF
			printf "42sh files:\n"
			cat 42sh_outfiles/*
			printf "\nbash files:\n"
			cat bash_outfiles/*
		fi

		printf "$RESET"
	done < "$file"
	printf "\n${SANDY_BROWN}" && printf "%${max_line_len}s" " " | tr ' ' '='; printf "\n"
done

echo -e "${buffer_error}"
printf "${GREEN}${ok}${RESET} / ${GREEN}${i}${RESET} test(s) passed !\n"

if [[ "${i}" == "${ok}" ]]; then
	printf "${GREEN}Congrats !${RESET}\n";
fi

rm -rf ./outfiles 2>/dev/null
rm -rf ./42sh_outfiles 2>/dev/null
rm -rf ./bash_outfiles 2>/dev/null
chmod 777 infiles/no_perms
