Files in directory
type ls export shell else
type djiejde 
type type
type echo
echo $(ls)
echo $(echo Hello)
echo $(echo First command; echo Second command)
echo $(ls && echo Listing succeeded || echo Listing failed)
echo Files in directory | cat - $(ls)
echo $(echo start; ls | grep .c; echo done)
echo $(mkdir test_dir && echo Directory created || echo Directory creation failed)
echo $(rm non_existent_file || echo File not found)
echo $(echo $(echo nested; ls) | echo Finished)
echo $(echo $(echo salut; echo prout) | echo salut)
$(cd /nonexistent | echo Changed dir || echo Failed to change dir; echo Command complete)
echo $(echo salut; echo salut) | ls
echo $(ls /etc | head -n 5)
echo $(uname -a && echo Kernel info)
echo $(echo $(ls | wc -l) | cat - $(echo Done))
echo $(ls /etc && ls /nonexistentdir || echo Dir not found)
echo $(echo Pipe test && ls /usr | grep bin | wc -l)
echo $(cat /dev/null && echo Empty file || echo Fallback)
echo $(mkdir newdir && ls && rmdir newdir && echo Dir test complete)
echo $(find /usr -maxdepth 1 -type d | xargs ls | grep bin && echo Dir listing done)
echo $(seq 1 10 | xargs -I {} echo {} | wc -l && echo Xargs done)
echo $(ls /etc | grep conf | wc -l)
echo $(find /etc | grep conf | head -n 3)
echo $(echo Test done; echo $(ls /usr | head -n 5))
echo $(false && echo Fail || echo Success)
echo $(ls /bin | grep bash && echo Found bash || echo Not found)
echo $(echo Begin test; ls /etc | grep conf | wc -l)
echo $(ls | grep txt && echo Text files found || echo No text files)
echo $(echo Start; echo $(echo $(ls /etc | grep conf) | wc -l) && echo Finish)
echo $(mkdir tempdir && echo Dir created; rmdir tempdir && echo Dir removed)
echo prefix$(echo salut)suffix
echo count:$(ls | wc -l)files
echo first file:$(ls | head -n 1)
echo kernel:$(uname -r)version
echo path:$(echo /usr/bin | grep bin)found
echo current user:$(whoami)
echo check:$(echo $(ls /etc | grep conf)config files)
echo listing:$(echo $(ls /usr/home | grep sh))done
echo last command:$(echo $(ls /etc | wc -l))files found
echo $(echo $(echo $(uname)))suffix
echo status:$(ls /etc | grep $(whoami) | wc -l)processes running
echo result:$(mkdir testdir && echo created || echo failed)directory
echo result:$(echo $(ls /usr | grep lib))libraries found
echo FirstPrefix$(echo salut)FirstSuffix$(echo salut)EndSuffix
echo $(echo FirstPrefix$(echo $(echo hey))FirstSuffix$(echo salut)EndSuffix)
echo $(echo $(mkdir tempdir && echo Dir created && (rmdir tempdir && echo Dir removed)))
echo prefix$(echo $(echo inside subshell))suffix
echo files:$(ls | (wc -l))listed
echo first file:$(ls | (head -n 1))found
echo $(echo $(echo $(ls | wc -l)) files in current directory)
echo username:$(whoami | (echo $(grep -o .)))
echo current dir:$(pwd | (echo $(ls $(pwd) | grep $(basename $(pwd)))))
echo file check:$(echo $(ls /etc | (grep conf && echo configuration files)))done
echo full check:$(echo $(echo prefix$(uname)postfix))suffix
echo $(mkdir dirtest && echo Directory made && (rmdir dirtest && echo Directory removed))complete
echo result:$(echo $(ls /usr | (grep bin && echo binaries found)))
echo nesting:$(echo $(echo $(echo inner level reached)))done
echo dir test:$(echo $(mkdir newdir && echo dir created && (rmdir newdir && echo dir removed)))complete
echo process count:$(ps aux | (grep $(whoami) && echo $(ps aux | wc -l)))processes running
echo $(ls | (echo first:$(head -n 1) && echo last:$(tail -n 1)))file list complete
echo result:$(echo $(echo kernel:$(uname -r)))system details
echo test case:$(echo $(echo $(mkdir $(echo tempdir) && echo dir created && (rmdir tempdir && echo dir removed))))nested
echo directories:$(echo $(echo $(ls / | (grep home && echo home found))))
echo deep nesting:$(echo $(echo $(echo $(echo $(uname)))))suffix
echo match count:$(echo $(ls /usr | (grep bin && echo found))items located)
echo path validation:$(echo $(echo $(echo $(echo /usr/bin | (grep usr))))valid)
echo $(echo $(echo $(mkdir testdir && echo created && (rmdir testdir && echo removed))))status
echo ${}
echo ${VAR:-}
echo ${VAR:}
echo ${:VAR}
echo ${DEFINED_VAR:-${NESTED_VARIABLE:-}
echo ${:VAR:=default_value}
echo ${VAR:-${NESTED_VAR}
echo ${:-VAR}
echo ${PATH}
echo ${8PATH}
echo ${PATH${salut}}
echo ${?}
echo ${PATH}d1${PATH}d2${PATH}
echo ${UNDEFINED:-default_value} | rev
echo ${PATH:-/default/path}
echo ${UNDEFINED:-NoValue} | cat
echo ${HOME:-/home/unknown}
echo ${PATH:-/tmp} | rev
echo ${HOME:=salut}; echo ${HOME}
echo ${UNDEFINED:=salut}; echo ${UNDEFINED}
echo ${HOME:?salut}; echo ${HOME}
echo ${UNDEFINED:? variable is not set or has no value}; echo ${UNDEFINED}
echo ${EMPTY:-default_value}
echo ${DEFINED_VARIABLE:-fallback_value}
echo ${UNSET_VARIABLE:=assigned_value}; echo ${UNSET_VARIABLE}
echo ${MISSING_VARIABLE:?variable is not set or has no value}
echo ${DEFINED_VAR:?variable is not set or has no value}
echo ${DEFINED_VAR:-${NESTED_VARIABLE:-fallback}}
echo ${UNDEFINED_VAR:=new_default}; echo ${UNDEFINED_VAR}
echo ${NUMBER:-123}
echo ${UNDEFINED_NUMBER:-999} | rev
echo ${VARIABLE_WITH_SPACE:-default_value}
echo ${UNDEFINED_VAR:-Empty_Value} | cat
echo ${HOME_VAR:-/default/home}
echo ${UNDEFINED_VAR:=temporary}; echo ${UNDEFINED_VAR}
echo ${HOME_SET:?Home is not set}; echo ${HOME_SET}
echo ${NEWW:=/home/homecoucou/home/home}; echo ${NEWW#}
echo ${NEWW:=/home/homecoucou/home/home}; echo ${NEWW##}
echo ${NEWW:=/home/homecoucou/home/home}; echo ${NEWW%}
echo ${NEWW:=/home/homecoucou/home/home}; echo ${NEWW%%}
echo ${NEWW:=/home/homecoucou/home/home}; echo ${NEWW#}
echo ${NEWW:=/home/homecoucou/home/home}; echo ${NEWW##/home}
echo ${NEWW:=/home/homecoucou/home/home}; echo ${NEWW%/home}
echo ${NEWW:=/home/homecoucou/home/home}; echo ${NEWW%%/home}
echo ${#PATH}
echo ${PATH:}
echo ${#PATH:-DSADAS}
echo ${#DFPASDAS}
echo ${#}
42sh_outfiles
bash_outfiles
command_sub
expand
infiles
outfiles
outilesl
redirections
subshell
syntax
test
test_dir
testdir
tester.sh
(echo Hello World)
(echo Hello; echo World)
(echo Start; (echo Nested; echo Subshell); echo End)
(echo This && echo That)
(false || echo This ran because the first command failed)
(echo First && false || echo Fallback)
(echo This will run && echo And then this)
(false && echo Wont run || echo But this will)
((echo Outer && (echo Inner || echo Fallback)) || echo Outer fallback)
(echo Start && false || echo Continue; echo End)
(echo Outer && (false || echo Inner) && echo Final)
(false && (echo Wont run && echo Neither will this) || echo This will run)
((echo A && echo B) || (echo C && echo D) && echo E)
(echo Start && false || (echo Intermediate && echo End))
(false || (echo Subshell ran && echo hey)) && echo This wont print
((echo Check && true) && echo Passed || echo Failed)
(echo A && (echo B && echo C) || (echo D && echo E))
(false && (echo F && echo G) || (echo H && echo I) && (false || echo J))
(echo Start && (false || (echo Mid && (echo End || false))))
(echo A; (echo B && false) || (echo C && echo D); echo E)
(false && (echo A && echo B) || (false || echo C && (echo D && echo E)))
((echo A && (echo B || echo C)) || echo D; (echo E && false || echo F))
(echo A && (false || (echo B && echo C) && echo D) || echo E)
((false || (echo A && echo B) || (false && echo C)) && echo D)
(echo A || (echo B && (false || echo C)) && echo D; echo E)
((echo A && false) || (false && echo B) || (echo C && (echo D || echo E)))
(echo A && (echo B; echo C && echo D || (false && echo E)); echo F)
((false && echo A) || (echo B && echo C) && (echo D || false) && echo E)
(echo A && echo B || (echo C && echo D) && (false || echo E))
(echo A; (false || (echo B && false || echo C)); echo D)
((echo A && (echo B || echo C)) && (false || echo D); echo E)
(false || (echo A && (echo B && false || echo C)) && echo D)
(echo A && echo B || (false && echo C) && (echo D && false) || echo E)
((false || echo A) && echo B || (echo C && echo D); echo E)
(echo A && false) || echo B
(echo A | echo B)
(echo First | (echo Second && echo Third) || echo Fourth)
((echo PipeTest | echo TestSuccess) && echo Done || echo Failed)
(echo Start && echo Proceed || echo Fallback | echo End)
(echo A && (echo B | echo C) && echo D)
((false || (echo PipeOne | echo PipeTwo)) && echo Continue)
(echo First; echo Second | echo Third; echo Fourth)
((false && echo FailOne) || (echo PassOne | echo PassTwo))
(echo A && (echo B && (echo C | echo D)) || echo E)
(echo Init && (false || echo Mid | echo End))
(echo A | (echo B && (false || echo C)) && echo D)
(echo A || (echo B && echo C) | (echo D || echo E); echo F)
((echo A | echo B) || (false && echo Fail) || echo Continue)
(echo Start | echo Mid && echo Next || (echo Fallback | echo Final))
((echo StepOne && false) || (echo StepTwo | echo StepThree))
(false || echo A | (echo B && echo C) || echo D)
(echo Outer && (false || (echo InnerOne | echo InnerTwo)) && echo Final)
(echo First; (echo Second | (echo Third && echo Fourth)); echo Last)
(echo A && (echo B || echo C) && echo D | echo E)
(echo First | false || (echo Second && echo Third))
((false || (echo A | echo B)) && (echo C && echo D) || echo F)
(echo A && echo B | (false && echo Fail || echo Success))
((false || echo A | echo B) && (echo C || echo D) && echo E)
(echo A || (echo B && false | echo C) && echo D)
(echo A | (false || echo B) && echo C && echo D)
((echo Init && false) || (echo Mid | (echo End && echo Done)))
(false && (echo X | echo Y) || echo Z | echo Final)
(echo TestOne | (false || echo TestTwo) && echo TestThree)
(echo A; (false || echo B | echo C) && echo D)
(echo A && (false || echo B) && echo C | echo D)
(echo A | (echo B && false) || echo C && echo D)
(echo X && (false || (echo Y && echo Z | echo W)))
((echo A && echo B) || (echo C | (echo D && echo E)) && echo F)
(echo Start && ((echo InnerOne | echo InnerTwo) && false || echo Fallback) && echo End)
(((echo A | echo B) && (false || (echo C && echo D))) || echo E; echo FinalStep)
(echo First | (false || (echo Second && (echo Third || echo Fourth))) && echo End)
((echo OuterStart && (echo MidOne | false || echo MidTwo)) || (echo OuterEnd && echo FinalCheck))
(echo TestOne && (false || (echo TestTwo | echo TestThree)) && (echo PassOne || echo FailOne) && echo Result)
((echo ComplexA || (echo ComplexB && echo ComplexC)) && echo ComplexEnd | (false && echo FailStep || echo SuccessStep))
(echo StartOne && echo StartTwo || ((echo PipeOne && false) || echo PipeTwo | echo PipeThree) && echo FinalTest)
((echo Alpha | (false || echo Beta && echo Gamma)) && (echo Delta || echo Epsilon) && (echo FinalOne || echo FinalTwo))
(((echo DeepA | echo DeepB) && echo DeepC) || (false || (echo DeepD && echo DeepE | echo DeepF)))
(echo ChainOne && echo ChainTwo | (echo ChainThree && (false || echo ChainFour)) && echo ChainFinal)
(echo A | (echo B && (false || (echo C | echo D) && echo E)) || (echo F && false) || echo G)
((echo OuterLayer && (echo MidLayer || (echo InnerLayerOne | false && echo InnerLayerTwo))) && echo CompleteTest)
(echo PreStep && (false || (echo MidStep | echo NextStep && echo FinalStep)) || echo AltStep)
(((echo BaseOne | (false && echo BaseTwo) || echo BaseThree) && echo BaseFour) || (echo LastOne && echo LastTwo))
((echo A || (false && (echo B | echo C)) && (echo D || echo E)) && echo F | echo G)
(echo StartLevelOne && ((false || echo MidLevelTwo) && (echo FinalLevelThree | echo AltLevelFour)) || echo LastLevelFive)
((echo Begin && echo Process) || (false && echo Error) || (echo Recover && echo Continue) | echo WrapUp)
(((false || echo X && echo Y) | echo Z) && echo EndOne || echo EndTwo)
((echo StepOne && false || echo StepTwo) && (echo StepThree || echo StepFour | (false && echo StepFive)) && echo StepFinal)
(echo Init && (false || (echo ProcessOne && (echo ProcessTwo || echo ProcessThree)) || echo FallbackProcess))
((echo AlphaStep | echo BetaStep) && (false || echo GammaStep && echo DeltaStep) || echo EpsilonStep)
((false || echo EarlyExit) && echo MidProcess || (echo LateProcess && echo FinalOutcome))
(echo OuterStart | (false && (echo InnerFail && echo InnerCheck)) || echo OuterSuccess && echo FinalCheck)
((false && echo FailOne || echo PassOne) && (echo PassTwo || (echo PassThree | echo PassFour)) && echo FinalCheck)
(((echo TestOne || false) && echo TestTwo) || (echo TestThree && (echo TestFour | echo TestFive)) && echo Result)
(echo BeginSequence && (false || (echo SubStepOne && echo SubStepTwo || echo SubStepThree)) && echo FinalStep)
((false && echo SkipOne || echo RunOne) && (echo RunTwo && (false || echo RunThree | echo RunFour)) && echo CompleteRun)
((echo StartPath && (false || echo MidPathOne && echo MidPathTwo)) || (echo FailPath && echo AltPath) && echo EndPath)
(echo FirstLayer | (false || (echo SecondLayer && echo ThirdLayer) && (echo FourthLayer || false) | echo FifthLayer))
((echo EntryOne && false || echo EntryTwo) && (echo EntryThree || (echo EntryFour | false && echo EntryFive)) && echo EndEntry)
(echo salut; ls) | echo hey
((echo EntryOne && false | echo EntryTwo) | (echo EntryThree || (echo EntryFour | false && echo EntryFive)) && echo EndEntry)
(echo salut mec; echo hey !) >./outfiles/test
(echo salut mec; (echo inside nested shell; echo another line)) > ./outfiles/test2
(echo $(echo inside substitution); echo outside) > ./outfiles/test3
(echo salut mec; echo error >&2; echo finished) > ./outfiles/test4 2>&1
(echo salut mec; (echo nested output | rev); echo finished) > ./outfiles/test5
(echo first level; (echo second level; (echo third level))) > ./outfiles/test6
(echo starting process; echo background complete) > ./outfiles/test7
(echo salut mec | rev; echo other output) > ./outfiles/test8
(cat; (echo inside nested shell)) < ../Makefile > ./outfiles/test9
(echo salut mec || echo fallback; echo hey !) > ./outfiles/test1
(echo salut mec && (echo inside nested shell && echo another line)) > ./outfiles/test2
(echo $(echo inside substitution) | rev; echo outside) > ./outfiles/test3
(echo salut mec || echo fallback; echo error >&2; echo finished) > ./outfiles/test4 2>&1
(echo salut mec; (echo nested output | rev) | grep tuptuo; echo finished) > ./outfiles/test5
(echo first level && (echo second level || (echo third level))) > ./outfiles/test6
(echo starting process || echo this won’t run; ls; echo background complete) > ./outfiles/test7
(echo salut mec | rev && echo other output) > ./outfiles/test8
(cat && (echo inside nested shell && echo all done)) < ../Makefile > ./outfiles/test9
(echo first output && (echo nested | rev) | grep detsen) > ./outfiles/test10
(echo hello world | rev || echo failure) > ./outfiles/test11
(echo outer shell && (echo nested shell | rev || echo fallback | tr a-z A-Z)) > ./outfiles/test12
(echo salut mec | (echo nested inside | rev && echo other output || echo alternate)) > ./outfiles/test13
(cat | rev || echo failed to reverse) < ../Makefile > ./outfiles/test14
(echo running first && echo next command || echo won’t run | rev && echo done) > ./outfiles/test15
(echo first command || (echo second command | rev) || echo fallback) > ./outfiles/test16
(echo process start && ls || echo process failed; echo done) > ./outfiles/test17
(cat && (echo inside nested && echo still going) | rev) < ./infiles/file1 > ./outfiles/test18
(echo salut mec && (echo mec salut | rev) && echo success) > ./outfiles/test19
(echo salut mec | (echo mec salut | rev) || echo fallback) > ./outfiles/test20
echo Hello World
ls | ls | ls
ls > ./outfiles/ls
4<../Makefile cat 5<&4 <&5 | rev | sort | >./outfiles/test >./outfiles/test >./outfiles/test >./outfiles/test2 cat
echo 0 ; echo 1 | (echo 2 && echo 3) | echo 4 && echo 5
echo 1 | (echo 2 && echo 3) | echo 4 && echo 5
echo 1 | (echo 2 && echo 3) | echo 4
echo 1; echo 2 | echo 3
(echo 1 && echo 2 && echo 3 || echo 4) | djeidj
(cat ../Makefile | rev | sort | rev) && notfound 2>/dev/null || echo Yes
10<../Makefile cat <&10 >./outfiles/test | rev && (echo salut);
echo A || echo B; echo A || echo B
#!/bin/bash
EXEC_PATH="../42sh"
# PROMPT="echo -"

if [[ "${1}" == "-d" ]]; then
	debug=1;
	shift 1;
fi

if [[ $1 ]]; then
	test_lists=(
		$1
	)
else
	test_lists=(
		"test"
		"syntax"
		"expand"
		"subshell"
		"command_sub"
		"command_group"
		"arithmetic_expansion"
		"builtin_export"
	)
fi

REMOVE_COLORS="sed s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g"
REMOVE_EXIT="grep -v ^exit$"

BOLD="\e[1m"
YELLOW="\033[0;33m"
GREY="\033[38;5;244m"
PURPLE="\033[0;35m"
GREEN="\033[92m"
BLUE="\033[0;36m"
RED="\e[0;31m"
RESET="\033[0m"

mkdir -p ./outfiles
mkdir -p ./42sh_outfiles
mkdir -p ./bash_outfiles

chmod 000 infiles/no_perms

i=0
ok=0

for file in "${test_lists[@]}"
do
	printf "\n$RED ========$file========\n"
	while IFS= read -r line
	do
		
		((i++))

		rm -rf ./outfiles/*
		rm -rf ./42sh_outfiles/*

		EXEC_OUTPUT=$(echo -e "$line" | $EXEC_PATH 2>/dev/null | $REMOVE_COLORS | $REMOVE_EXIT)
		EXEC_COPY=$(cp ./outfiles/* ./42sh_outfiles &>/dev/null || echo "There is no file to copy")
		EXEC_ERROR=$(echo -e "$line" | $EXEC_PATH 2>&1 1>/dev/null | $REMOVE_COLORS | $REMOVE_EXIT | rev | cut -d':' -f1 | rev)
		EXEC_EXITNO=$(echo -e "$EXEC_PATH\n$line\necho ${?}\nexit\n" | $EXEC_PATH 2>/dev/null | $REMOVE_COLORS | grep -o '[0-9]*$' | tail -n1)

		rm -rf ./outfiles/*
		rm -rf ./bash_outfiles/*
		BASH_OUTPUT=$(echo -e "$line" | bash 2>/dev/null)
		BASH_COPY=$(cp ./outfiles/* ./bash_outfiles &>/dev/null || echo "There is no file to copy")
		BASH_ERROR=$(echo -e "$line" | bash 2>&1 1>/dev/null | rev | cut -d':' -f1 | rev)
		BASH_EXITNO=$(echo ${?})

		FILE_DIFF=$(diff -q ./42sh_outfiles ./bash_outfiles)

		printf "$BLUE$BOLD Test %4s:" $i
		
		if [[ "$EXEC_OUTPUT" == "$BASH_OUTPUT" && $FILE_DIFF == "" && "$EXEC_EXITNO" == "$BASH_EXITNO" && "$EXEC_COPY" == "$BASH_COPY" ]]; then
			printf "  ✅  "
			if [[ "$EXEC_ERROR" != "$BASH_ERROR" ]]; then
				printf "⚠️   "
			fi
			((ok++))
		else
			printf "  ❌  "
		fi
		if [ ${#line} -gt 80 ]; then
			printf "$RESET$GREY%.77s${RED}...$RESET \n" "$line"
		else
			printf "$RESET$GREY%.80s$RESET \n" "$line"
		fi

		if [[ "$EXEC_OUTPUT" != "$BASH_OUTPUT" ]]; then
			printf "42sh output: %s\n" "$EXEC_OUTPUT"
			printf "bash output: %s\n" "$BASH_OUTPUT"
		fi
		if [[ "$EXEC_ERROR" != "$BASH_ERROR" && debug -eq 1 ]]; then
			printf "42sh error: %s\n" "$EXEC_ERROR"
			printf "bash error: %s\n" "$BASH_ERROR"
		fi
		if [[ "$EXEC_EXITNO" != "$BASH_EXITNO" ]]; then
			printf "42sh exitno: %s\n" "$EXEC_EXITNO"
			printf "bash exitno: %s\n" "$BASH_EXITNO"
		fi
		if [[ "$EXEC_COPY" != "$BASH_COPY" ]]; then
			printf "42sh file copy: %s\n" "$EXEC_COPY"
			printf "bash file copy: %s\n" "$BASH_COPY"
		fi
		if [[ "$FILE_DIFF" ]];then
			echo $FILE_DIFF
			printf "42sh files:\n"
			cat 42sh_outfiles/*
			printf "\nbash files:\n"
			cat bash_outfiles/*
		fi

		printf "$RESET"
	done < "$file"
	printf "${RED} ======================================\n${RESET}"
done

printf "${GREEN}${ok}${RESET} / ${GREEN}${i}${RESET} test(s) passed !\n"

if [[ "${i}" == "${ok}" ]]; then
	printf "${GREEN}Congrats !${RESET}\n";
fi

rm -rf ./outfiles 2>/dev/null
rm -rf ./42sh_outfiles 2>/dev/null
rm -rf ./bash_outfiles 2>/dev/null
chmod 777 infiles/no_perms
