AND_IF	"&&"
OR_IF	"||"
NEWLINE '\n'


compound_list    : linebreak term
			     | linebreak term separator

term		     : term separator and_or
			     | and_or

and_or           : command
			     | and_or AND_IF linebreak command
			     | and_or OR_IF  linebreak command

command		     : simple_command
			     | compound_command

compound_command : if_clause

simple_command   : WORD

separator_op     : '&'
			     | ';'


linebreak		 : newline_list
				 | /* empty */ (Ԑ)

newline_list     : NEWLINE
			     | newline_list NEWLINE

separator        : separator_op linebreak
			     | newline_list

if_clause        : IF compound_list THEN compound_list FI


IF = "if", THEN = "then", FI = "fi", NEWLINE = "\n", AMPER = "&", SEMI = ";" 

Formula to find the LA --> A α.Bβ,a
					   --> FIRSTOF[β, a]

--------------- I0 ---------------
start_symbol -> • compound_list, $
compound_list  -> • linebreak term
compound_list  -> • linebreak term separator
term -> • term separator and_or
term -> • and_or
and_or -> • command
and_or -> • and_or AND_IF linebreak command
and_or -> • and_or OR_IF linebreak command
command -> • simple_command
command -> • compound_command
simple_command -> • WORD
compound_command -> • if_clause
separator -> • AMPER
separator -> • SEMI
linebreak -> • newline_list
linebreak -> • Ԑ
newline_list -> • NEWLINE
newline_list -> • newline_list NEWLINE
if_clause -> • IF compound_list THEN compound_list FI



Formula to find the LA --> A α.Bβ,a
					   --> FIRSTOF[β, a]


list -> and_or
list -> list separator and_or
and_or -> command
and_or -> and_or AND_IF command
and_or -> and_or OR_IF command
separator -> &
separator -> ;
command -> word_list
word_list -> WORD
word_list -> word_list WORD

Terminals : { "&", ";", "WORD: [a-z]*", "AND_IF: &&", "OR_IF: ||" }

Augmented grammar :

(0) S -> list
(1) list -> and_or
(2) list -> list separator and_or
(3) list -> list separator
(4) and_or -> command
(5) and_or -> and_or AND_IF command
(6) and_or -> and_or OR_IF command
(7) separator -> AMPER
(8) separator -> SEMI
(9) command -> word_list
(10) word_list -> WORD
(11) word_list -> word_list WORD

S' -> start_symbol
S -> list
B -> and_or
C -> separator
D -> command
E -> separator
F -> word_list
