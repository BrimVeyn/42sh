









































	
#                                                                              #
#                                                                              #
#                                                 +#+#+#+#+#+   +#+            #
#                                                     +:+ +:+         +:+      #
#                                                         :::      ::::::::    #
# **************************************************************************** #
# **************************************************************************** #
	@$(call cmd_wrapper, $(CC) $(CFLAGS) $(INC) -MMD -c $< -o $@)
        FILLED=$$((BAR_WIDTH * PERCENT / 100)); \
        BAR_WIDTH=50; \
COMPILE_COUNT := 0
    @CURRENT=$(1); \
	$1 || { printf "\033[?25h"; echo -n "$(DEF_COLOR)"; exit 1; }
    $(eval COMPILE_COUNT := $(shell echo $$(( $(COMPILE_COUNT) + 1 ))))
    TOTAL=$(2); \
CFLAGS 			:= -Wall -Wextra -Werror -Wunused-function -g3
LIBFT			:= libftprintf/libftprintf.a
STRING 			:= libstring/libstring.a
  -Wredundant-decls -Wall -Werror -Wextra
	@printf "$(MAGENTA)"
	@printf "$(MAGENTA)"
	@printf "$(MAGENTA)"
	@printf "$(MAGENTA)"
	@printf "$(MAGENTA)"
	@printf "$(MAGENTA)"
		printf "\033[1B"; \
EXEC_SRC 		:= $(wildcard source/exec/*.c)
CC 				:= gcc
$(OBJDIR)/%.o: source/%.c
FT_READLINE_SRC := $(wildcard source/ft_readline/*.c)
BIN_TEST		:= $(wildcard tester/bin/*.c)
LEXER_SRC 		:= $(wildcard source/lexer/*.c)
SRC_NO_MAIN := $(filter-out source/main.c, $(SRC))
				   $(REGEX_SRC) $(BUILTINS_SRC) $(FT_READLINE_SRC) \
SRC 			:= source/main.c $(LEXER_SRC) $(UTILS_SRC) \
				   $(EXPANSIONS_SRC) $(EXEC_SRC) $(SIGNALS_SRC) $(AST_SRC) \
SIGNALS_SRC		:= $(wildcard source/signals/*.c)
UTILS_SRC		:= $(wildcard source/utils/*.c)
BUILTINS_SRC	:= $(wildcard source/builtins/*.c)
EXPANSIONS_SRC	:= $(wildcard source/expansions/*.c)
AST_SRC			:= $(wildcard source/ast/*.c)
REGEX_SRC		:= $(wildcard source/regex/*.c)
  -Waggregate-return -Wstrict-overflow=5 -Wold-style-definition -Wpadded \
        EMPTY=$$((BAR_WIDTH - FILLED)); \
# Wrapper to exec command in order to handle the reset color if an error occured
DEPS 			:= $(OBJ:%.o=%.d)
#    Created: 2024/11/06 10:05:24 by bvan-pae          #+#    #+#              #
DIRS			:= $(patsubst source/%,objects/%,$(dir $(wildcard source/*/*)))
INC       := -I./include -I./libftprintf/header -I./libstring/include
#    Makefile                                           :+:      :+:    :+:    #
        echo "No files to compile."; \
all: compute_total $(NAME)
	@$(call cmd_wrapper, $(CC) $(OBJ) $(CFLAGS) $(LDFLAGS) $(LIBFT) $(STRING) -o $(NAME))
	@$(call cmd_wrapper, $(CC) $(OBJ) $(LIBFT) $(STRING) $(CFLAGS) $(LDFLAGS) $(SANFLAGS) -o $(NAME))
	@echo "$(GREEN)Making binary with sanitizer: $(NAME)"
	@echo "$(OLIVINE)Making binary: $(NAME)"
	bear -- make re
    else \
	@printf "$(BLUE)"
endef
endef
endef
  -Wmissing-declarations -Wfloat-equal -Wbad-function-cast -Wundef \
  -Wstrict-prototypes -Wmissing-prototypes -Wunreachable-code -Winit-self \
	@make --no-print-directory -C libftprintf/
        FILLED_BAR=$$(printf "%$${FILLED}s" | sed "s/ /$${FILLED_BLOCK}/g") \
        EMPTY_BAR=$$(printf "%$${EMPTY}s" | sed "s/ /$${EMPTY_BLOCK}/g"); \
$(STRING):
	@make --no-print-directory -C libstring/
NAME			:= 42sh
    fi
        if [ "$$CURRENT" -eq "$$TOTAL" ]; then printf "\033[?25h"; else printf "\033[2A"; fi; \
	$(eval TOTAL_FILES := $(shell var=$$(./progression_bar.sh); if [ $${var} -ne 0 ]; then echo $${var} ; else echo $(TOTAL_FILES); fi))
$(SAN): $(LIBFT) $(STRING) $(STRING) $(OBJDIR) $(OBJ)
$(NAME): $(LIBFT) $(STRING) $(OBJDIR) $(OBJ)
        FILLED_BLOCK="#"; \
        EMPTY_BLOCK=" "; \
		printf "\033[?25l"; \
        printf "\rProgress: [$(PASTEL_BLUE)$$FILLED_BAR$(DEF_COLOR)$$EMPTY_BAR] %d%% (%d/%d)\n" $$PERCENT $$CURRENT $$TOTAL; \
        PERCENT=$$((CURRENT * 100 / TOTAL)); \
compute_total:
re: fclean all
GRAY			:= \033[0;90m
RED				:= \033[0;91m
BOLD			:= \e[1m
OLIVINE   		:= \033[0;38;2;154;184;122m
GREEN			:= \033[0;92m
YELLOW			:= \033[0;93m
BLUE			:= \033[0;94m
MAGENTA			:= \033[0;95m
PASTEL_BLUE     := \033[0;38;2;130;135;206m
CYAN			:= \033[0;96m
WHITE			:= \033[0;97m
PRUSSIAN_BLUE   := \033[0;38;2;28;49;68m
DEF_COLOR		:= \033[0;39m
JASPER   		:= \033[0;38;2;213;87;59m
#    By: bvan-pae <bryan.vanpaemel@gmail.com>       +#+  +:+       +#+         #
clean:
	@make --no-print-directory -C libftprintf/ fclean
	@make --no-print-directory -C libstring/ fclean
	@make --no-print-directory -C libftprintf/ clean 
	@make --no-print-directory -C libstring/ clean 
fclean: clean
SAN 			:= san
    if [ "$$TOTAL" -eq 0 ]; then \
WWFLAGS = $(WFLAGS) -Wpedantic -Wshadow -Wconversion -Wcast-align \
$(EXEC_TEST): $(LIBFT) $(STRING) $(OBJDIR) $(OBJ_NO_MAIN)
$(FT_READLINE_TEST): $(LIBFT) $(STRING) $(OBJDIR) $(OBJ_NO_MAIN)
$(LEXER_TEST): $(LIBFT) $(STRING) $(OBJDIR) $(OBJ_NO_MAIN)
$(AST_TEST): $(LIBFT) $(STRING) $(OBJDIR) $(OBJ_NO_MAIN)
$(REGEX_TEST): $(LIBFT) $(STRING) $(OBJDIR) $(OBJ_NO_MAIN)
	@printf "$(JASPER)Objects deleted !$(DEF_COLOR)\n"
	@printf "$(JASPER)Binary deleted !$(DEF_COLOR)\n"
	@printf "Done !$(DEF_COLOR)\n"
	@printf "$(EXEC_TEST) done !$(DEF_COLOR)\n"
	@printf "$(FT_READLINE_TEST) done !$(DEF_COLOR)\n"
	@printf "$(LEXER_TEST) done !$(DEF_COLOR)\n"
	@printf "$(AST_TEST) done !$(DEF_COLOR)\n"
	@printf "$(REGEX_TEST) done !$(DEF_COLOR)\n"
	@printf "Done with sanitizer !$(DEF_COLOR)\n"
OBJ 			:= $(SRC:source/%.c=objects/%.o)
OBJ_NO_MAIN := $(SRC_NO_MAIN:source/%.c=objects/%.o) 
# Shell function to print a progress bar
define print_progress_bar
bear:
define cmd_wrapper
	@printf "$(JASPER)"
#    Updated: 2024/12/10 13:06:35 by bvan-pae         ###   ########.fr        #
$(OBJDIR):
	@rm -rf $(OBJDIR)
	@printf "$(DEF_COLOR)"
    $(call print_progress_bar,$(COMPILE_COUNT),$(TOTAL_FILES))
LDFLAGS			:= -lreadline -lncurses
SANFLAGS		:= -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined -fstack-protector-strong -fno-optimize-sibling-calls
-include $(DEPS)
	@mkdir -p $(DIRS)
OBJDIR 			:= objects
$(LIBFT):
define update_compile_count
	@$(call update_compile_count)
# Define a function that prints a progress bar based on the current count
	@$(call cmd_wrapper, $(CC) $(OBJ_NO_MAIN) $(EXEC_MAIN) $(INC) $(LIBFT) $(STRING) $(CFLAGS) $(LDFLAGS) -o $(EXEC_TEST))
	@echo "$(RED)Making test binary: $(EXEC_TEST)"
EXEC_TEST		:= exec_test
	@$(call cmd_wrapper, $(CC) $(OBJ_NO_MAIN) $(FT_READLINE_MAIN) $(INC) $(LIBFT) $(STRING) $(CFLAGS) $(LDFLAGS) -o $(FT_READLINE_TEST))
	@rm -rf $(NAME) $(AST_TEST) $(REGEX_TEST) $(EXEC_TEST) $(LEXER_TEST) $(FT_READLINE_TEST)
	@echo "$(RED)Making test binary: $(FT_READLINE_TEST)"
.PHONY: all clean fclean re regex_test lexer_test exec_test san ft_readline_test
FT_READLINE_TEST		:= ft_readline_test
EXEC_MAIN	:= $(filter %/exec_main.c, $(BIN_TEST))
FT_READLINE_MAIN		:= $(filter %/ft_readline_main.c, $(BIN_TEST))
LEXER_MAIN	:= $(filter %/lexer_main.c, $(BIN_TEST))
AST_MAIN		:= $(filter %/ast_main.c, $(BIN_TEST))
REGEX_MAIN	:= $(filter %/regex_main.c, $(BIN_TEST))
	@$(call cmd_wrapper, $(CC) $(OBJ_NO_MAIN) $(LEXER_MAIN) $(INC) $(LIBFT) $(STRING) $(CFLAGS) $(LDFLAGS) -o $(LEXER_TEST))	
	@echo "$(RED)Making test binary: $(LEXER_TEST)"
LEXER_TEST	:= lexer_test
	@$(call cmd_wrapper, $(CC) $(OBJ_NO_MAIN) $(AST_MAIN) $(INC) $(LIBFT) $(STRING) $(CFLAGS) $(LDFLAGS) -o $(AST_TEST))
	@echo "$(RED)Making test binary: $(AST_TEST)"
AST_TEST		:= ast_test
	@$(call cmd_wrapper, $(CC) $(OBJ_NO_MAIN) $(REGEX_MAIN) $(INC) $(LIBFT) $(STRING) $(CFLAGS) $(LDFLAGS) -o $(REGEX_TEST))
	@echo "$(RED)Making test binary: $(REGEX_TEST)"
REGEX_TEST	:= regex_test
TOTAL_FILES := $(shell echo $(SRC) | wc -w)
Yes
